# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _gravitacion
else:
    import _gravitacion

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gravitacion.delete_SwigPyIterator

    def value(self):
        return _gravitacion.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gravitacion.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gravitacion.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gravitacion.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gravitacion.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gravitacion.SwigPyIterator_copy(self)

    def next(self):
        return _gravitacion.SwigPyIterator_next(self)

    def __next__(self):
        return _gravitacion.SwigPyIterator___next__(self)

    def previous(self):
        return _gravitacion.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gravitacion.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gravitacion.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gravitacion.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gravitacion.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gravitacion.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gravitacion.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gravitacion.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gravitacion:
_gravitacion.SwigPyIterator_swigregister(SwigPyIterator)

class Cuerpo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gravitacion.Cuerpo_swiginit(self, _gravitacion.new_Cuerpo(*args))

    def getNombre(self):
        return _gravitacion.Cuerpo_getNombre(self)

    def getX(self):
        return _gravitacion.Cuerpo_getX(self)

    def getY(self):
        return _gravitacion.Cuerpo_getY(self)

    def getVx(self):
        return _gravitacion.Cuerpo_getVx(self)

    def getVy(self):
        return _gravitacion.Cuerpo_getVy(self)

    def getRadio(self):
        return _gravitacion.Cuerpo_getRadio(self)

    def getFuerza(self):
        return _gravitacion.Cuerpo_getFuerza(self)

    def getMasa(self):
        return _gravitacion.Cuerpo_getMasa(self)

    def getVt(self):
        return _gravitacion.Cuerpo_getVt(self)

    def getXt(self):
        return _gravitacion.Cuerpo_getXt(self)

    def setNombre(self, _nombre):
        return _gravitacion.Cuerpo_setNombre(self, _nombre)

    def setX(self, _x):
        return _gravitacion.Cuerpo_setX(self, _x)

    def setY(self, _y):
        return _gravitacion.Cuerpo_setY(self, _y)

    def setVx(self, _vx):
        return _gravitacion.Cuerpo_setVx(self, _vx)

    def setVy(self, _vy):
        return _gravitacion.Cuerpo_setVy(self, _vy)

    def setRadio(self, _masa):
        return _gravitacion.Cuerpo_setRadio(self, _masa)

    def setFuerza(self, _fuerza):
        return _gravitacion.Cuerpo_setFuerza(self, _fuerza)

    def setMasa(self, _masa):
        return _gravitacion.Cuerpo_setMasa(self, _masa)

    def setVt(self, _vt):
        return _gravitacion.Cuerpo_setVt(self, _vt)

    def setXt(self, _xt):
        return _gravitacion.Cuerpo_setXt(self, _xt)
    __swig_destroy__ = _gravitacion.delete_Cuerpo

# Register Cuerpo in _gravitacion:
_gravitacion.Cuerpo_swigregister(Cuerpo)

class Calculos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def fuerzaGravitacional(fuente, cuerpos):
        return _gravitacion.Calculos_fuerzaGravitacional(fuente, cuerpos)

    @staticmethod
    def calcularVectores(cuerpo, rp, ite):
        return _gravitacion.Calculos_calcularVectores(cuerpo, rp, ite)

    @staticmethod
    def generarDiscoAsteroides(cuerpos, na, rd):
        return _gravitacion.Calculos_generarDiscoAsteroides(cuerpos, na, rd)

    def __init__(self):
        _gravitacion.Calculos_swiginit(self, _gravitacion.new_Calculos())
    __swig_destroy__ = _gravitacion.delete_Calculos

# Register Calculos in _gravitacion:
_gravitacion.Calculos_swigregister(Calculos)

def Calculos_fuerzaGravitacional(fuente, cuerpos):
    return _gravitacion.Calculos_fuerzaGravitacional(fuente, cuerpos)

def Calculos_calcularVectores(cuerpo, rp, ite):
    return _gravitacion.Calculos_calcularVectores(cuerpo, rp, ite)

def Calculos_generarDiscoAsteroides(cuerpos, na, rd):
    return _gravitacion.Calculos_generarDiscoAsteroides(cuerpos, na, rd)

class Sim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _ms, mp, _rp, _na, _rd):
        _gravitacion.Sim_swiginit(self, _gravitacion.new_Sim(_ms, mp, _rp, _na, _rd))

    def run(self, _ns):
        return _gravitacion.Sim_run(self, _ns)
    __swig_destroy__ = _gravitacion.delete_Sim

# Register Sim in _gravitacion:
_gravitacion.Sim_swigregister(Sim)

class vectorc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _gravitacion.vectorc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravitacion.vectorc___nonzero__(self)

    def __bool__(self):
        return _gravitacion.vectorc___bool__(self)

    def __len__(self):
        return _gravitacion.vectorc___len__(self)

    def __getslice__(self, i, j):
        return _gravitacion.vectorc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravitacion.vectorc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravitacion.vectorc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravitacion.vectorc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravitacion.vectorc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravitacion.vectorc___setitem__(self, *args)

    def pop(self):
        return _gravitacion.vectorc_pop(self)

    def append(self, x):
        return _gravitacion.vectorc_append(self, x)

    def empty(self):
        return _gravitacion.vectorc_empty(self)

    def size(self):
        return _gravitacion.vectorc_size(self)

    def swap(self, v):
        return _gravitacion.vectorc_swap(self, v)

    def begin(self):
        return _gravitacion.vectorc_begin(self)

    def end(self):
        return _gravitacion.vectorc_end(self)

    def rbegin(self):
        return _gravitacion.vectorc_rbegin(self)

    def rend(self):
        return _gravitacion.vectorc_rend(self)

    def clear(self):
        return _gravitacion.vectorc_clear(self)

    def get_allocator(self):
        return _gravitacion.vectorc_get_allocator(self)

    def pop_back(self):
        return _gravitacion.vectorc_pop_back(self)

    def erase(self, *args):
        return _gravitacion.vectorc_erase(self, *args)

    def __init__(self, *args):
        _gravitacion.vectorc_swiginit(self, _gravitacion.new_vectorc(*args))

    def push_back(self, x):
        return _gravitacion.vectorc_push_back(self, x)

    def front(self):
        return _gravitacion.vectorc_front(self)

    def back(self):
        return _gravitacion.vectorc_back(self)

    def assign(self, n, x):
        return _gravitacion.vectorc_assign(self, n, x)

    def resize(self, *args):
        return _gravitacion.vectorc_resize(self, *args)

    def insert(self, *args):
        return _gravitacion.vectorc_insert(self, *args)

    def reserve(self, n):
        return _gravitacion.vectorc_reserve(self, n)

    def capacity(self):
        return _gravitacion.vectorc_capacity(self)
    __swig_destroy__ = _gravitacion.delete_vectorc

# Register vectorc in _gravitacion:
_gravitacion.vectorc_swigregister(vectorc)



